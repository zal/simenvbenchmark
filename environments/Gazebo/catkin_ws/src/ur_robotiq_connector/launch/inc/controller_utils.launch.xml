<?xml version="1.0"?>
<launch>
  <!-- Parameters we share with ur_robot_driver -->
  <arg name="ur_controller_config_file" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="3f_controller_config_file" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller eff_joint_traj_controller robotiq_joint_state_controller robotiq_3f_controller"/>
  <arg name="stopped_controllers" default="joint_group_eff_controller"/>

  <!-- Gazebo parameters -->
  <arg name="debug" default="false" doc="Activates the debug mode."/>
  <arg name="enable_ros_network" default="true"/>
  <arg name="gazebo_model_name" default="robot" doc="The name to give to the model in Gazebo (after spawning it)."/>
  <arg name="gazebo_world" default="worlds/empty.world" doc="The '.world' file to load in Gazebo."/>
  <arg name="gui" default="true" doc="If true, Gazebo UI is started. If false, only start Gazebo server."/>
  <arg name="gui_required" default="false"/>
  <arg name="output" default="screen"/>
  <arg name="paused" default="true" doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded."/>
  <arg name="physics" default="ode" doc="ODE is the default Physics-engine, Bullet and Dartsim are also implemented."/>
  <arg name="pub_clock_frequency" default="100"/>
  <arg name="recording" default="false"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo."/>
  <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere."/>
  <arg name="server_required" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="verbose" default="false"/>

  <!-- Initial Position of the robot in meters and radians -->
  <arg name="spawn_x" default="0.0" doc="x in meters."/>
  <arg name="spawn_y" default="0.0" doc="y in meters."/>
  <arg name="spawn_z" default="0.1" doc="z (height) in meters. NOTE: lower values will cause the robot to collide with the ground plane."/>
  <arg name="spawn_R" default="0.0" doc="roll in radians."/>
  <arg name="spawn_P" default="0.0" doc="pitch in radians."/>
  <arg name="spawn_Y" default="0.0" doc="yaw in radians."/>
  <!-- UR: Initial joint positions in radians -->
  <arg name="spawn_shoulder_pan" default="0.0"/>
  <arg name="spawn_shoulder_lift" default="0.0"/>
  <arg name="spawn_elbow" default="0.0"/>
  <arg name="spawn_wrist_1" default="0.0"/>
  <arg name="spawn_wrist_2" default="0.0"/>
  <arg name="spawn_wrist_3" default="0.0"/>
  <!-- Robotiq-3f: Initial joint positions in radians -->
  <arg name="spawn_f1_j1" default="0.0"/>
  <arg name="spawn_f1_j2" default="0.0"/>
  <arg name="spawn_f1_j3" default="0.0"/>
  <arg name="spawn_f2_j1" default="0.0"/>
  <arg name="spawn_f2_j2" default="0.0"/>
  <arg name="spawn_f2_j3" default="0.0"/>
  <arg name="spawn_mid_j1" default="0.0"/>
  <arg name="spawn_mid_j2" default="0.0"/>
  <arg name="spawn_mid_j3" default="0.0"/>
  <arg name="spawn_palm_f1" default="0.0"/>
  <arg name="spawn_palm_f2" default="0.0"/>

  <!-- Load controller settings -->
  <rosparam file="$(arg ur_controller_config_file)" command="load"/>
  <rosparam file="$(arg 3f_controller_config_file)" command="load"/>

  <!-- Start Gazebo and load the empty world if requested to do so -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="debug" value="$(arg debug)"/>
    <arg name="enable_ros_network" value="$(arg enable_ros_network)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="gui_required" value="$(arg gui_required)"/>
    <arg name="output" value="$(arg output)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="physics" value="$(arg physics)"/>
    <arg name="pub_clock_frequency" value="$(arg pub_clock_frequency)"/>
    <arg name="recording" value="$(arg recording)"/>
    <arg name="respawn_gazebo" value="$(arg respawn_gazebo)"/>
    <arg name="server_required" value="$(arg server_required)"/>
    <arg name="use_clock_frequency" value="$(arg use_clock_frequency)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="world_name" value="$(arg gazebo_world)"/>
  </include>

  <!--
  Spawn the model loaded earlier in the simulation just started.

  To initialize the joint positions, it's necessary to start the physics paused when the robot spawns.
  The '-unpause' option is important to let the joints snap into position and add the name of the robot,
  in this case it's simply "robot".
  -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -unpause
      -model $(arg gazebo_model_name)
      -x $(arg spawn_x)
      -y $(arg spawn_y)
      -z $(arg spawn_z)
      -P $(arg spawn_P)
      -R $(arg spawn_R)
      -Y $(arg spawn_Y)
      -J robot::shoulder_pan_joint $(arg spawn_shoulder_pan)
      -J robot::shoulder_lift_joint $(arg spawn_shoulder_lift)
      -J robot::elbow_joint $(arg spawn_elbow)
      -J robot::wrist_1_joint $(arg spawn_wrist_1)
      -J robot::wrist_2_joint $(arg spawn_wrist_2)
      -J robot::wrist_3_joint $(arg spawn_wrist_3)
      -J robot::finger_1_joint_1 $(arg spawn_f1_j1)
      -J robot::finger_1_joint_2 $(arg spawn_f1_j2)
      -J robot::finger_1_joint_3 $(arg spawn_f1_j3)
      -J robot::finger_2_joint_1 $(arg spawn_f2_j1)
      -J robot::finger_2_joint_2 $(arg spawn_f2_j2)
      -J robot::finger_2_joint_3 $(arg spawn_f2_j3)
      -J robot::finger_middle_joint_1 $(arg spawn_mid_j1)
      -J robot::finger_middle_joint_2 $(arg spawn_mid_j2)
      -J robot::finger_middle_joint_3 $(arg spawn_mid_j3)
      -J robot::palm_finger_1_joint $(arg spawn_palm_f1)
      -J robot::palm_finger_2_joint $(arg spawn_palm_f2)"
    output="screen" respawn="false" />

  <!-- Load and start the controllers listed in the 'controllers' arg. -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- Load other controllers, but do not start them -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

</launch>
